<project name="SEMaTLabWork3" default="build" basedir=".">
    <description>
        Script for Apache Ant program to simplify compiling, testing etc. with Web-Programming 3rd lab work
    </description>
    <description>463563</description>

    <property file="build.properties"/>

    <path id="dependencies-jars">
        <fileset dir="${dir.libs}"/>
    </path>

    <taskdef resource="net/sf/antcontrib/antlib.xml"/>

    <target name="init">
        <mkdir dir="${dir.target}"/>
    </target>

    <target name="compile" depends="init" description="Compile project source classes">
        <mkdir dir="${dir.target.compile}"/>
        <javac srcdir="${dir.source.code}" destdir="${dir.target.compile}" fork="true" classpathref="dependencies-jars"/>
    </target>

    <target name="build" depends="compile" description="Compile sources and pack to an executable war archive">
        <mkdir dir="${dir.target.build}"/>
        <war destfile="${dir.target.build}/${build.war.name}" webxml="${path.web-xml}" basedir="${dir.source.static}">
            <classes dir="${dir.source.resources}"/>
            <classes dir="${dir.target.compile}" includes="/**/*.class"/>
            <classes file="${path.hibernate-config}"/>
            <lib dir="${dir.libs}"/>
            <webinf file="${path.faces-config}"/>
            <manifest>
                <attribute name="Created-By" value="${build.manifest.creator}"/>
            </manifest>
        </war>
    </target>

    <target name="clean" description="Clean compiled classes and temporary files">
        <delete dir="${dir.target}"/>
    </target>

    <target name="test-compile" depends="init,compile" description="Compile project tests classes">
        <mkdir dir="${dir.target.tests}"/>
        <mkdir dir="${test.compile.dir}"/>
        <javac srcdir="${dir.source.test}" destdir="${test.compile.dir}" fork="true">
            <classpath>
                <path refid="dependencies-jars"/>
                <pathelement location="${dir.target.compile}"/>
            </classpath>
        </javac>
    </target>

    <target name="test" depends="build,test-compile" description="Launch project Junit tests">
        <mkdir dir="${test.report.dir}"/>
        <junit printsummary="withOutAndErr" haltonfailure="true">
            <classpath>
                <path refid="dependencies-jars"/>
                <pathelement location="${dir.target.compile}"/>
                <pathelement location="${test.compile.dir}"/>
            </classpath>
            <batchtest todir="${test.report.dir}">
                <fileset dir="${test.compile.dir}" includes="**/*Test.class" />
                <formatter type="xml"/>
            </batchtest>
        </junit>
    </target>

    <target name="scp" depends="build" description="Send built project to server via scp">
        <scp
                file="${dir.target.build}/${build.war.name}"
                toDir="${scp.user}@${scp.host}:${scp.destdir}"
                password="${scp.password}"
                port="${scp.port}"
        />
    </target>

    <target name="xml" description="Validate all project's xml files">
        <xmlvalidate>
            <attribute name="http://apache.org/xml/features/validation/schema"  value="true"/>
            <attribute name="http://xml.org/sax/features/namespaces" value="true"/>
            <fileset dir="${dir.source}" includes="**/*.xml"/>
        </xmlvalidate>
        <xmlvalidate lenient="true">
            <fileset dir="${dir.source}" includes="**/*.xhtml"/>
        </xmlvalidate>
    </target>

    <target name="music" description="Play music after building the sources">
        <sound>
            <success source="${music.dir}/music-success.wav"/>
            <fail source="${music.dir}/music-fail.wav"/>
        </sound>
        <antcall target="build"/>
    </target>

    <target name="native2ascii" depends="init" description="Use native2ascii transform with localization files">
        <mkdir dir="${dir.target.native2ascii}"/>
        <native2ascii encoding="UTF-8" src="${dir.source.resources}" dest="${dir.target.native2ascii}"/>
    </target>

    <target name="report" depends="test" description="In case of all tests passed save xml junit report, add it to repository and commit">
        <tstamp>
            <format property="DATE_TIME" pattern="dd.MM.yyyy hh-mm-ss"/>
        </tstamp>
        <property name="report-filename" value="JUNIT-Report ${DATE_TIME}.xml"/>
        <mkdir dir="${report.project.report.dir}"/>
        <junitreport todir="${report.project.report.dir}" tofile="${report-filename}">
            <fileset dir="${test.report.dir}"/>
        </junitreport>
        <exec executable="git" dir="${report.project.report.dir}">
            <arg value="add"/>
            <arg value="${report-filename}"/>
        </exec>
        <exec executable="git" dir="${report.project.report.dir}">
            <arg value="commit"/>
            <arg value="-m"/>
            <arg value="Generate report ${report-filename}"/>
        </exec>
    </target>

    <target name="history" description="Create diff of files changed after last revision that can be built">
        <trycatch>
            <try>
                <echo message="Try to compile last project version"/>
                <antcall target="compile"/>
                <echo message="Last project version compiled successfully"/>
                <echo message="No diff file created"/>
            </try>
            <catch>
                <echo message="Last project version compilation failed"/>

                <echo message="Extract what HEAD points to (branch/commit)"/>
                <trycatch>
                    <try>
                        <exec executable="git" dir="${dir.source}" failonerror="true">
                            <arg value="symbolic-ref"/>
                            <arg value="HEAD"/>
                        </exec>
                        <echo message="HEAD is point to branch"/>
                        <exec executable="git" dir="${dir.source}" outputproperty="history.start-branch">
                            <arg value="rev-parse"/>
                            <arg value="--abbrev-ref"/>
                            <arg value="HEAD"/>
                        </exec>
                    </try>
                    <catch>
                        <echo message="HEAD is in 'Detached head' state"/>
                        <exec executable="git" dir="${dir.source}" outputproperty="history.start-branch">
                            <arg value="rev-parse"/>
                            <arg value="HEAD"/>
                        </exec>
                    </catch>
                </trycatch>
                <echo message="HEAD points to ${history.start-branch}"/>

                <exec executable="git" dir="${dir.source}" outputproperty="git.history">
                    <arg value="rev-list"/>
                    <arg value="HEAD"/>
                </exec>

                <var name="success-revision" unset="true"/>
                <for list="${git.history}" param="commit-hash" delimiter="${line.separator}">
                    <sequential>
                        <if><not><isset property="success-revision"/></not><then>
                            <trycatch>
                                <try>
                                    <exec executable="git" dir="${dir.source}" failonerror="true" outputproperty="previous-commit-hash">
                                        <arg value="rev-parse"/>
                                        <arg value="@{commit-hash}~1"/>
                                    </exec>
                                    <exec executable="git" dir="${dir.source}" failonerror="true">
                                        <arg value="checkout"/>
                                        <arg value="-q"/>
                                        <arg value="${previous-commit-hash}"/>
                                    </exec>
                                    <trycatch>
                                        <try>
                                            <echo message="Try to compile revision ${previous-commit-hash}"/>
                                            <antcall target="compile"/>
                                            <echo message="Revision ${previous-commit-hash} compiled successfully"/>
                                            <var name="success-revision" value="@{commit-hash}"/>
                                        </try>
                                        <catch>
                                            <echo message="Revision ${previous-commit-hash} compilation failed"/>
                                        </catch>
                                    </trycatch>
                                </try>
                                <catch>
                                    <echo message="Git can't checkout previous commit of @{commit-hash}"/>
                                    <echo message="First revision @{commit-hash} reached"/>
                                </catch>
                            </trycatch>
                        </then></if>
                    </sequential>
                </for>

                <if><isset property="success-revision"/><then>
                    <echo message="Create diff file"/>
                    <mkdir dir="${dir.target.history}"/>
                    <property name="diff-file" location="${dir.target.history}/DIFF ${success-revision}.txt"/>
                    <exec executable="git" dir="${dir.source}" output="${diff-file}">
                        <arg value="diff"/>
                        <arg value="${success-revision}~1"/>
                        <arg value="${success-revision}"/>
                    </exec>
                </then></if>

                <echo message="Return to ${history.start-branch}"/>
                <exec executable="git" dir="${dir.source}">
                    <arg value="checkout"/>
                    <arg value="-q"/>
                    <arg value="${history.start-branch}"/>
                </exec>
            </catch>
        </trycatch>
    </target>

</project>